"""
utils/recommender_engine.py (v3.5)
-----------------------------------
Inclui geraÃ§Ã£o de resumo com nome do responsÃ¡vel.
"""

from typing import Dict, Any
import re


def enhance_markdown(
    guided_md: str,
    validation_result: Dict[str, Any],
    include_suggestions: bool = True,
    tutor_mode: bool = False,
) -> str:
    """Insere sugestÃµes construtivas no markdown."""
    md = guided_md or ""
    if not include_suggestions:
        return md

    semantic = validation_result.get("semantic_result", [])
    has_gaps = any(not item.get("presente", True) for item in semantic)

    suggestions = [
        ("ğŸ’¡ *SugestÃ£o:* Cite a **Lei nÂº 14.133/2021** e a **IN SAAB nÂº 12/2025**."),
        ("ğŸ’¡ *SugestÃ£o:* Descreva alternativas consideradas e critÃ©rios de escolha."),
        ("ğŸ’¡ *SugestÃ£o:* Inclua especificaÃ§Ãµes tÃ©cnicas essenciais."),
        ("ğŸ’¡ *SugestÃ£o:* Adicione estimativa de custos e justificativa orÃ§amentÃ¡ria."),
        ("ğŸ’¡ *SugestÃ£o:* Mencione aspectos de sustentabilidade e ESG."),
    ]

    if tutor_mode or has_gaps:
        for s in suggestions:
            if s not in md:
                md += f"\n\n{s}"

    return md


def generate_summary(validation_result: Dict[str, Any], tutor_mode: bool, responsavel: str) -> str:
    """Resumo de anÃ¡lise institucional com nome do responsÃ¡vel."""
    rigid = validation_result.get("rigid_score", 0)
    semantic = validation_result.get("semantic_score", 0)
    mode = "Tutor Orientador" if tutor_mode else "Avaliador Institucional"
    status = "Completo e sem lacunas detectadas." if semantic >= 80 else "Possui pontos de melhoria."
    return (
        f"ğŸ§© Modo: {mode}\n"
        f"ğŸ‘¤ ResponsÃ¡vel pela elaboraÃ§Ã£o: {responsavel}\n"
        f"ğŸ“… Data: {validation_result.get('timestamp', 'Registro automÃ¡tico')}\n"
        f"ğŸ“Š Score RÃ­gido: {rigid:.1f}% | Score SemÃ¢ntico: {semantic:.1f}%\n"
        f"ğŸ“ˆ AvaliaÃ§Ã£o geral: {status}"
    )
