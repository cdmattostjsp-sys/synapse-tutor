"""
utils/recommender_engine.py  (v3.1)
-----------------------------------
Gera sugestÃµes de complementaÃ§Ã£o a partir do validator_engine_vNext
e injeta essas sugestÃµes no markdown antes da exportaÃ§Ã£o.

AtualizaÃ§Ã£o 3.1:
- Ajuste fino nas correspondÃªncias de seÃ§Ãµes.
- Marcadores visuais aprimorados.
- CompatÃ­vel com opÃ§Ã£o "incluir/excluir sugestÃµes".
"""

from typing import Dict, Any, List
import re

# ---------- Biblioteca de sugestÃµes ----------
SUGGESTION_LIBRARY = [
    {
        "key": "legislacao",
        "triggers": ["legislaÃ§Ã£o", "lei 14.133", "fundamento legal"],
        "title": "Fundamento Legal",
        "text": (
            "ğŸ’¡ *SugestÃ£o:* Incluir referÃªncia Ã  **Lei nÂº 14.133/2021** e Ã  **IN SAAB nÂº 12/2025**, "
            "destacando a conformidade da demanda com os princÃ­pios da fase interna."
        ),
        "section_hint": ["Justificativa", "IntroduÃ§Ã£o", "Alinhamento"]
    },
    {
        "key": "alternativas",
        "triggers": ["alternativas", "anÃ¡lise de alternativas"],
        "title": "AnÃ¡lise de Alternativas",
        "text": (
            "ğŸ’¡ *SugestÃ£o:* Descrever as **alternativas consideradas** (reutilizaÃ§Ã£o, soluÃ§Ã£o interna, contrataÃ§Ã£o direta ou atas), "
            "indicando o motivo da escolha."
        ),
        "section_hint": ["DescriÃ§Ã£o", "Justificativa"]
    },
    {
        "key": "especificacoes",
        "triggers": ["especificaÃ§Ãµes", "caracterÃ­sticas tÃ©cnicas"],
        "title": "EspecificaÃ§Ãµes TÃ©cnicas",
        "text": (
            "ğŸ’¡ *SugestÃ£o:* Detalhar **especificaÃ§Ãµes tÃ©cnicas essenciais** (dimensÃµes, materiais, padrÃµes de qualidade, "
            "garantia e conformidade normativa)."
        ),
        "section_hint": ["DescriÃ§Ã£o"]
    },
    {
        "key": "custos",
        "triggers": ["estimativa de custos", "orÃ§amento", "custo"],
        "title": "Estimativa de Custos",
        "text": (
            "ğŸ’¡ *SugestÃ£o:* Adicionar **estimativa de custos**, indicando fonte de pesquisa, "
            "mÃ©todo de cÃ¡lculo e dotaÃ§Ã£o orÃ§amentÃ¡ria prevista."
        ),
        "section_hint": ["Justificativa", "Alinhamento"]
    },
    {
        "key": "sustentabilidade",
        "triggers": ["sustentabilidade", "esg"],
        "title": "Sustentabilidade",
        "text": (
            "ğŸ’¡ *SugestÃ£o:* Apontar **aspectos de sustentabilidade** (materiais, reaproveitamento, certificaÃ§Ãµes, "
            "logÃ­stica reversa) conforme diretrizes do TJSP."
        ),
        "section_hint": ["DescriÃ§Ã£o", "BenefÃ­cios"]
    },
    {
        "key": "riscos",
        "triggers": ["matriz de riscos", "riscos", "gestÃ£o de riscos"],
        "title": "Matriz de Riscos",
        "text": (
            "ğŸ’¡ *SugestÃ£o:* Incluir **matriz de riscos** com eventos, impactos e estratÃ©gias de mitigaÃ§Ã£o."
        ),
        "section_hint": ["Riscos", "Justificativa"]
    },
    {
        "key": "beneficios",
        "triggers": ["benefÃ­cios", "vantagens"],
        "title": "BenefÃ­cios Esperados",
        "text": (
            "ğŸ’¡ *SugestÃ£o:* Descrever **benefÃ­cios institucionais e impactos positivos**, "
            "com indicadores quando possÃ­vel."
        ),
        "section_hint": ["BenefÃ­cios"]
    },
    {
        "key": "criterios",
        "triggers": ["critÃ©rios de avaliaÃ§Ã£o", "indicadores"],
        "title": "CritÃ©rios de AvaliaÃ§Ã£o",
        "text": (
            "ğŸ’¡ *SugestÃ£o:* Definir **critÃ©rios de avaliaÃ§Ã£o e mediÃ§Ã£o**, "
            "incluindo prazos, conformidade tÃ©cnica e qualidade do serviÃ§o."
        ),
        "section_hint": ["CritÃ©rios", "BenefÃ­cios"]
    },
]

# ---------- FunÃ§Ãµes internas ----------
def _normalize(txt: str) -> str:
    return (txt or "").strip().lower()

def _pick_suggestions_from_semantic(semantic_result: List[Dict[str, Any]]) -> List[Dict[str, str]]:
    picked = []
    for item in semantic_result or []:
        desc = _normalize(item.get("descricao", ""))
        if item.get("presente", False):
            continue
        for sug in SUGGESTION_LIBRARY:
            if any(trig in desc for trig in [t.lower() for t in sug["triggers"]]):
                picked.append(sug)
                break
    # remove duplicados
    titles_seen = set()
    unique = []
    for s in picked:
        if s["title"] not in titles_seen:
            unique.append(s)
            titles_seen.add(s["title"])
    return unique

# ---------- Mapeamento de seÃ§Ãµes ----------
SECTION_PATTERNS = [
    (re.compile(r"(?i)##?.*justificativa"), "Justificativa"),
    (re.compile(r"(?i)##?.*riscos"), "Riscos"),
    (re.compile(r"(?i)##?.*descriÃ§Ã£o"), "DescriÃ§Ã£o"),
    (re.compile(r"(?i)##?.*benef"), "BenefÃ­cios"),
    (re.compile(r"(?i)##?.*alinhamento"), "Alinhamento"),
    (re.compile(r"(?i)##?.*documentos"), "Documentos"),
]

def _inject_after_section(md_text: str, section_label: str, insertion: str) -> str:
    for pattern, label in SECTION_PATTERNS:
        if label == section_label:
            match = pattern.search(md_text)
            if match:
                pos = match.end()
                return md_text[:pos] + "\n\n" + insertion.strip() + "\n" + md_text[pos:]
    return md_text

# ---------- FunÃ§Ã£o pÃºblica ----------
def enhance_markdown(guided_md: str, validation_result: Dict[str, Any], include_suggestions: bool = True) -> str:
    """
    Retorna markdown aprimorado com sugestÃµes construtivas.
    """
    md = guided_md or ""
    if not include_suggestions:
        return md

    suggestions = _pick_suggestions_from_semantic(validation_result.get("semantic_result"))
    if not suggestions:
        return md + "\n\n---\nğŸ’¬ *Nenhuma sugestÃ£o identificada nesta etapa. Revise critÃ©rios e indicadores.*"

    pending = []
    for s in suggestions:
        inserted = False
        for section_hint in s["section_hint"]:
            new_md = _inject_after_section(md, section_hint, s["text"])
            if new_md != md:
                md = new_md
                inserted = True
                break
        if not inserted:
            pending.append(s)

    if pending:
        md += "\n\n## SugestÃµes de ComplementaÃ§Ã£o\n"
        for s in pending:
            md += f"- **{s['title']}** â€” {s['text']}\n"

    return md
