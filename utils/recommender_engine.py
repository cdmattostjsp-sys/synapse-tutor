"""
utils/recommender_engine.py (v3.4)
-----------------------------------
Modo Tutor / Modo Avaliador + suporte a logs.
Agora inclui:
- GeraÃ§Ã£o de resumo de anÃ¡lise para logs e rodapÃ©
- SugestÃµes com tÃ­tulos mais claros e formato uniforme
"""

from typing import Dict, Any, List
import re


SUGGESTION_LIBRARY = [
    {
        "key": "legislacao",
        "title": "Fundamento Legal",
        "text": "ğŸ’¡ *SugestÃ£o:* Cite a **Lei nÂº 14.133/2021** e a **IN SAAB nÂº 12/2025**.",
        "section_hint": ["Justificativa", "Alinhamento"],
    },
    {
        "key": "alternativas",
        "title": "AnÃ¡lise de Alternativas",
        "text": "ğŸ’¡ *SugestÃ£o:* Descreva as **alternativas consideradas** e o motivo da escolha.",
        "section_hint": ["DescriÃ§Ã£o", "Justificativa"],
    },
    {
        "key": "especificacoes",
        "title": "EspecificaÃ§Ãµes TÃ©cnicas",
        "text": "ğŸ’¡ *SugestÃ£o:* Detalhe as **especificaÃ§Ãµes tÃ©cnicas essenciais**.",
        "section_hint": ["DescriÃ§Ã£o"],
    },
    {
        "key": "custos",
        "title": "Estimativa de Custos",
        "text": "ğŸ’¡ *SugestÃ£o:* Adicione **estimativa de custos e justificativa orÃ§amentÃ¡ria**.",
        "section_hint": ["Justificativa"],
    },
    {
        "key": "sustentabilidade",
        "title": "Sustentabilidade",
        "text": "ğŸ’¡ *SugestÃ£o:* Mencione **aspectos de sustentabilidade e ESG**.",
        "section_hint": ["DescriÃ§Ã£o", "BenefÃ­cios"],
    },
    {
        "key": "riscos",
        "title": "Matriz de Riscos",
        "text": "ğŸ’¡ *SugestÃ£o:* Inclua **matriz de riscos** com mitigaÃ§Ã£o e impacto.",
        "section_hint": ["Riscos", "Justificativa"],
    },
]


def enhance_markdown(
    guided_md: str,
    validation_result: Dict[str, Any],
    include_suggestions: bool = True,
    tutor_mode: bool = False,
) -> str:
    """Gera markdown aprimorado com sugestÃµes construtivas."""

    md = guided_md or ""
    if not include_suggestions:
        return md

    semantic = validation_result.get("semantic_result", [])
    has_gaps = any(not item.get("presente", True) for item in semantic)

    suggestions = []
    if tutor_mode or has_gaps:
        for s in SUGGESTION_LIBRARY[:4 if tutor_mode else len(SUGGESTION_LIBRARY)]:
            text = f"{s['text']}"
            for section_hint in s["section_hint"]:
                if re.search(rf"(?i){section_hint}", md):
                    md = re.sub(rf"(?i)({section_hint}.*?)$", r"\1\n\n" + text, md, 1)
                    break
            else:
                suggestions.append(s)

    # Caso nÃ£o haja sugestÃµes especÃ­ficas
    if not suggestions and not has_gaps:
        md += "\n\n---\nğŸ’¬ *Documento completo: nenhuma sugestÃ£o necessÃ¡ria.*"

    return md


def generate_summary(validation_result: Dict[str, Any], tutor_mode: bool) -> str:
    """Gera um resumo textual para inclusÃ£o nos logs e no rodapÃ© do DOCX."""
    rigid = validation_result.get("rigid_score", 0)
    semantic = validation_result.get("semantic_score", 0)
    mode = "Tutor Orientador" if tutor_mode else "Avaliador Institucional"
    status = "Completo e sem lacunas detectadas." if semantic >= 80 else "Possui pontos de melhoria."
    return (
        f"ğŸ§© Modo: {mode}\n"
        f"ğŸ“… Data: Registro automÃ¡tico de execuÃ§Ã£o.\n"
        f"ğŸ“Š Score RÃ­gido: {rigid:.1f}% | Score SemÃ¢ntico: {semantic:.1f}%\n"
        f"ğŸ“ˆ AvaliaÃ§Ã£o geral: {status}"
    )
