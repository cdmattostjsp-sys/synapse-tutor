"""
0_Tutor_Mode.py
--------------------------------
Interface do modo Tutor Adaptativo do Synapse.IA
Permite que o usu√°rio descreva sua necessidade em linguagem natural
e receba orienta√ß√µes din√¢micas para constru√ß√£o dos artefatos (DFD, ETP, TR).
"""

import streamlit as st
import json
import os
import sys

# Adicionar o caminho base para importar os agentes
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../..")))

from agents.guide_agent import generate_guidance

# ---------------------------------------------
# CONFIGURA√á√ÉO INICIAL DO APP
# ---------------------------------------------
st.set_page_config(
    page_title="Synapse Tutor ‚Äî Jornada Guiada",
    page_icon="üß≠",
    layout="wide"
)

st.title("üß≠ Synapse Tutor ‚Äî Jornada Guiada")
st.markdown("""
O **Synapse Tutor** √© um assistente adaptativo que orienta o usu√°rio
na elabora√ß√£o de documentos t√©cnicos da fase interna da licita√ß√£o
(DFD ‚Üí ETP ‚Üí TR).  
Descreva abaixo sua necessidade e veja as perguntas que o sistema
gerar√° para ajudar na constru√ß√£o do artefato adequado.
""")

# ---------------------------------------------
# √ÅREA DE ENTRADA DO USU√ÅRIO
# ---------------------------------------------
user_input = st.text_area(
    "‚úçÔ∏è Descreva sua necessidade ou problema:",
    placeholder="Exemplo: precisamos substituir mesas de audi√™ncia danificadas no F√≥rum de Sorocaba...",
    height=180
)

col1, col2 = st.columns([1, 1])

with col1:
    generate_button = st.button("üîç Detectar etapa e gerar perguntas")

with col2:
    st.markdown("")

# ---------------------------------------------
# A√á√ÉO PRINCIPAL ‚Äî EXECU√á√ÉO DO AGENTE
# ---------------------------------------------
if generate_button and user_input.strip():
    with st.spinner("Analisando sua descri√ß√£o e preparando orienta√ß√µes..."):
        guidance = generate_guidance(user_input)

    if "error" in guidance:
        st.error(f"‚ùå Erro: {guidance['error']}")
    else:
        # ---------------------------------------------
        # EXIBI√á√ÉO DOS RESULTADOS
        # ---------------------------------------------
        st.success(f"‚úÖ Etapa detectada: **{guidance['etapa_atual'].upper()}**")
        st.write(f"**Pr√≥ximo passo:** {guidance['proximo_passo']}")
        st.info(f"üß© Documento em foco: **{guidance['documento_em_foco']}**")
        st.markdown(f"üìò {guidance['descricao_etapa']}")

        # ---------------------------------------------
        # PROGRESSO
        # ---------------------------------------------
        campos = guidance.get("campos_minimos", [])
        total_campos = len(campos)
        progresso = 0.0 if total_campos == 0 else (1 / total_campos)
        st.progress(progresso, text="Progresso inicial da jornada")

        # ---------------------------------------------
        # PERGUNTAS RECOMENDADAS
        # ---------------------------------------------
        st.subheader("üß† Perguntas recomendadas")
        perguntas = guidance.get("perguntas_recomendadas", {})

        if perguntas:
            for chave, pergunta in perguntas.items():
                st.markdown(f"- **{pergunta}**")
        else:
            st.warning("Nenhuma pergunta encontrada para esta etapa.")

        # ---------------------------------------------
        # VISUALIZA√á√ÉO T√âCNICA (debug opcional)
        # ---------------------------------------------
        with st.expander("üß© Ver estrutura t√©cnica da resposta"):
            st.json(guidance)

else:
    st.info("üí° Digite uma necessidade e clique em **Detectar etapa e gerar perguntas** para iniciar a jornada.")

# ---------------------------------------------
# RODAP√â
# ---------------------------------------------
st.markdown("---")
st.caption("Vers√£o POC ‚Ä¢ Tribunal de Justi√ßa de S√£o Paulo ‚Ä¢ SAAB ‚Ä¢ Synapse.IA 2025")
# placeholder for 0_Tutor_Mode.py

