import streamlit as st
import yaml
import json
import os
from datetime import datetime

# ============================================================
# Synapse Tutor v2 - Jornada Guiada Interativa (POC TJSP)
# Compat√≠vel com estrutura YAML em chave-valor (DFD, ETP, TR)
# ============================================================

st.set_page_config(
    page_title="Synapse Tutor ‚Äì Jornada Guiada v2",
    layout="wide",
)

st.title("üß≠ Synapse Tutor ‚Äî Jornada Guiada Interativa")
st.markdown("""
O **Synapse Tutor v2** √© um assistente adaptativo que **coleta respostas do usu√°rio** e gera automaticamente
um rascunho textual do **Documento de Formaliza√ß√£o da Demanda (DFD)**, com base nas informa√ß√µes preenchidas.
""")

# ------------------------------------------------------------
# 1. Carregar banco de perguntas (journey/question_bank.yaml)
# ------------------------------------------------------------
try:
    with open(os.path.join("journey", "question_bank.yaml"), "r", encoding="utf-8") as file:
        question_bank = yaml.safe_load(file)
except FileNotFoundError:
    st.error("‚ùå Arquivo 'question_bank.yaml' n√£o encontrado. Verifique o caminho da pasta journey/.")
    st.stop()

# ------------------------------------------------------------
# 2. Inicializar vari√°veis de sess√£o
# ------------------------------------------------------------
if "respostas" not in st.session_state:
    st.session_state["respostas"] = {}

if "etapa" not in st.session_state:
    st.session_state["etapa"] = "DFD"

st.divider()

# ------------------------------------------------------------
# 3. Formul√°rio interativo - compat√≠vel com YAML chave-valor
# ------------------------------------------------------------
st.subheader("üßæ Preencha as respostas para as perguntas abaixo:")

dfd_questions = question_bank.get("dfd", {})
total_questions = len(dfd_questions)
answered_count = 0

for key, question_text in dfd_questions.items():
    campo_key = f"resp_{key}"
    resposta = st.text_area(question_text, value=st.session_state["respostas"].get(campo_key, ""), height=80)
    if resposta.strip():
        st.session_state["respostas"][campo_key] = resposta
        answered_count += 1

# ------------------------------------------------------------
# 4. Barra de progresso
# ------------------------------------------------------------
progress = (answered_count / total_questions) if total_questions > 0 else 0
st.progress(progress, text=f"Progresso: {answered_count}/{total_questions} respostas")

# ------------------------------------------------------------
# 5. Bot√£o para gerar documento textual
# ------------------------------------------------------------
st.divider()
st.subheader("üìÑ Gera√ß√£o do Documento DFD")

if st.button("Gerar Documento DFD"):
    respostas = st.session_state["respostas"]

    if not respostas:
        st.warning("‚ö†Ô∏è Nenhuma resposta foi preenchida ainda.")
        st.stop()

    # Montagem do texto em formato institucional, usando chaves do YAML
    dfd_text = f"""
# Documento de Formaliza√ß√£o da Demanda (DFD)
**Data:** {datetime.now().strftime('%d/%m/%Y')}  
**Unidade Solicitante:** {respostas.get('resp_unidade_demandante', 'N√£o informado')}  
**Respons√°vel pela Solicita√ß√£o:** {respostas.get('resp_responsavel', 'N√£o informado')}

---

## 1Ô∏è‚É£ Descri√ß√£o do Objeto
{respostas.get('resp_objeto', 'N√£o informado')}

---

## 2Ô∏è‚É£ Justificativa da Necessidade
{respostas.get('resp_justificativa', 'N√£o informado')}

---

## 3Ô∏è‚É£ Quantidade, Urg√™ncia e Riscos
- **Quantidade ou escopo:** {respostas.get('resp_quantidade_ou_escopo', 'N√£o informado')}
- **Condi√ß√£o de urg√™ncia:** {respostas.get('resp_condicao_urgencia', 'N√£o informado')}
- **Riscos se n√£o atendido:** {respostas.get('resp_riscos', 'N√£o informado')}

---

## 4Ô∏è‚É£ Alinhamento Institucional
{respostas.get('resp_alinhamento_planejamento', 'N√£o informado')}

---

## 5Ô∏è‚É£ Documentos de Suporte
{respostas.get('resp_documentos_suporte', 'N√£o informado')}

---

_Gerado automaticamente pelo Synapse Tutor ‚Äî SAAB/TJSP, vers√£o POC 2025_
"""

    st.success("‚úÖ Documento gerado com sucesso!")
    st.markdown(dfd_text)

    # Exibe tamb√©m o JSON t√©cnico da jornada
    with st.expander("üìò Estrutura t√©cnica (JSON consolidado)"):
        st.json(respostas)

st.divider()
st.caption("Vers√£o POC ‚Ä¢ Tribunal de Justi√ßa de S√£o Paulo ‚Ä¢ SAAB ‚Ä¢ Synapse.IA 2025")
