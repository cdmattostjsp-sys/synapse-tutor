import sys
import os

# =========================================
# Ajuste de PATH
# =========================================
root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
if root_dir not in sys.path:
    sys.path.append(root_dir)

from datetime import datetime
import streamlit as st
import yaml
from openai import OpenAI

from validator_engine_vNext import validate_document
from utils.formatter_docx import markdown_to_docx
from utils.recommender_engine import enhance_markdown

# -------------------------------
# Config
# -------------------------------
st.set_page_config(page_title="Synapse Tutor ‚Äì Jornada Guiada v2", layout="wide")

st.title("üß≠ Synapse Tutor ‚Äî Jornada Guiada Interativa (DFD)")
st.markdown("""
O **Synapse Tutor v2** agora permite **inserir ou ocultar sugest√µes construtivas** no rascunho final (.docx),
mantendo a ader√™ncia √† **Lei n¬∫ 14.133/2021** e √† **IN SAAB n¬∫ 12/2025**.
""")

# -------------------------------
# Fun√ß√µes auxiliares
# -------------------------------
def _load_api_client():
    api_key = os.getenv("OPENAI_API_KEY") or st.secrets.get("OPENAI_API_KEY", None)
    if not api_key:
        st.warning("‚ö†Ô∏è Para valida√ß√£o sem√¢ntica, configure OPENAI_API_KEY.")
        return None
    return OpenAI(api_key=api_key)

def _load_question_bank():
    try:
        with open(os.path.join("journey", "question_bank.yaml"), "r", encoding="utf-8") as f:
            return yaml.safe_load(f)
    except FileNotFoundError:
        st.error("‚ùå Arquivo 'journey/question_bank.yaml' n√£o encontrado.")
        st.stop()

# -------------------------------
# Estado
# -------------------------------
if "respostas" not in st.session_state:
    st.session_state["respostas"] = {}
if "dfd_text" not in st.session_state:
    st.session_state["dfd_text"] = ""
if "validation_result" not in st.session_state:
    st.session_state["validation_result"] = None
if "enhanced_markdown" not in st.session_state:
    st.session_state["enhanced_markdown"] = ""

# -------------------------------
# Perguntas
# -------------------------------
question_bank = _load_question_bank()
dfd_questions = question_bank.get("dfd", {})
st.divider()
st.subheader("üßæ Preencha as respostas abaixo")

answered = 0
for key, pergunta in dfd_questions.items():
    campo = f"resp_{key}"
    resposta = st.text_area(pergunta, value=st.session_state["respostas"].get(campo, ""), height=80)
    if resposta.strip():
        st.session_state["respostas"][campo] = resposta
        answered += 1

st.progress(answered / len(dfd_questions or [1]), text=f"{answered}/{len(dfd_questions)} respostas")

# -------------------------------
# Gera√ß√£o do DFD
# -------------------------------
st.divider()
st.subheader("üìÑ Gera√ß√£o do Documento")

if st.button("Gerar DFD", type="primary"):
    r = st.session_state["respostas"]
    if not r:
        st.warning("‚ö†Ô∏è Preencha as respostas primeiro.")
    else:
        dfd_text = f"""
# Documento de Formaliza√ß√£o da Demanda (DFD)
**Data:** {datetime.now():%d/%m/%Y}  
**Unidade Solicitante:** {r.get('resp_unidade_demandante', 'N√£o informado')}  
**Respons√°vel:** {r.get('resp_responsavel', 'N√£o informado')}

## 1Ô∏è‚É£ Descri√ß√£o do Objeto
{r.get('resp_objeto', 'N√£o informado')}

## 2Ô∏è‚É£ Justificativa da Necessidade
{r.get('resp_justificativa', 'N√£o informado')}

## 3Ô∏è‚É£ Quantidade, Urg√™ncia e Riscos
- **Quantidade:** {r.get('resp_quantidade_ou_escopo', 'N√£o informado')}
- **Urg√™ncia:** {r.get('resp_condicao_urgencia', 'N√£o informado')}
- **Riscos:** {r.get('resp_riscos', 'N√£o informado')}

## 4Ô∏è‚É£ Alinhamento Institucional
{r.get('resp_alinhamento_planejamento', 'N√£o informado')}

## 5Ô∏è‚É£ Documentos de Suporte
{r.get('resp_documentos_suporte', 'N√£o informado')}

_Gerado automaticamente pelo Synapse Tutor ‚Äî SAAB/TJSP, vers√£o POC 2025_
"""
        st.session_state["dfd_text"] = dfd_text
        st.session_state["validation_result"] = None
        st.session_state["enhanced_markdown"] = ""
        st.success("‚úÖ Documento base criado.")

# -------------------------------
# Valida√ß√£o + Recomenda√ß√µes
# -------------------------------
st.divider()
st.subheader("‚úÖ Valida√ß√£o e Recomenda√ß√µes")

include_suggestions = st.checkbox("üîò Incluir sugest√µes construtivas no resultado", value=True)

if st.button("Executar valida√ß√£o"):
    if not st.session_state["dfd_text"]:
        st.warning("‚ö†Ô∏è Gere o documento DFD antes.")
    else:
        client = _load_api_client()
        if client:
            with st.spinner("Executando valida√ß√£o..."):
                vr = validate_document(st.session_state["dfd_text"], "DFD", client)
                st.session_state["validation_result"] = vr
                enhanced = enhance_markdown(vr.get("guided_markdown", ""), vr, include_suggestions)
                st.session_state["enhanced_markdown"] = enhanced
                st.success("Valida√ß√£o e recomenda√ß√µes conclu√≠das!")

vr = st.session_state.get("validation_result")
if vr:
    c1, c2 = st.columns(2)
    c1.metric("Score R√≠gido", f"{vr.get('rigid_score', 0):.1f}%")
    c2.metric("Score Sem√¢ntico", f"{vr.get('semantic_score', 0):.1f}%")

    st.markdown("### üìù Rascunho Orientado Final")
    md_final = st.session_state["enhanced_markdown"] or vr.get("guided_markdown", "")
    st.markdown(md_final)

    # Downloads
    st.download_button("‚¨áÔ∏è Baixar (.md)", data=md_final.encode(), file_name="DFD_orientado.md", mime="text/markdown")

    buffer = markdown_to_docx(md_final, "DFD (Rascunho com Sugest√µes)" if include_suggestions else "DFD (Rascunho Limpo)")
    st.download_button("‚¨áÔ∏è Baixar (.docx)", data=buffer, file_name="DFD_orientado.docx",
                       mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document")
