import sys
import os

# =========================================
# Ajuste de PATH para permitir imports da raiz do projeto
# =========================================
# Detecta o caminho raiz do projeto (duas pastas acima)
root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
if root_dir not in sys.path:
    sys.path.append(root_dir)

# Agora os imports do projeto funcionam normalmente
from datetime import datetime
import streamlit as st
import yaml
from openai import OpenAI

from validator_engine_vNext import validate_document  # ‚úÖ Agora acess√≠vel
from utils.formatter_docx import markdown_to_docx


# -------------------------------
# Configura√ß√£o da p√°gina
# -------------------------------
st.set_page_config(
    page_title="Synapse Tutor ‚Äì Jornada Guiada v2",
    layout="wide",
)

st.title("üß≠ Synapse Tutor ‚Äî Jornada Guiada Interativa (DFD)")
st.markdown("""
O **Synapse Tutor v2** coleta respostas e gera um rascunho textual do **Documento de Formaliza√ß√£o da Demanda (DFD)**,
com **valida√ß√£o sem√¢ntica autom√°tica** e **exporta√ß√£o institucional em .docx**.
""")

# -------------------------------
# Fun√ß√µes auxiliares
# -------------------------------
def _load_api_client():
    """
    Obt√©m a chave da API (usando o mesmo padr√£o de synapse_chat_vNext.py)
    """
    api_key = os.getenv("OPENAI_API_KEY") or st.secrets.get("OPENAI_API_KEY", None)
    if not api_key:
        st.warning("‚ö†Ô∏è Para executar a valida√ß√£o sem√¢ntica, defina OPENAI_API_KEY (env ou secrets).")
        return None
    return OpenAI(api_key=api_key)


def _load_question_bank():
    """
    Carrega o arquivo journey/question_bank.yaml
    """
    try:
        with open(os.path.join("journey", "question_bank.yaml"), "r", encoding="utf-8") as file:
            return yaml.safe_load(file)
    except FileNotFoundError:
        st.error("‚ùå Arquivo 'journey/question_bank.yaml' n√£o encontrado.")
        st.stop()


# -------------------------------
# Estado da sess√£o
# -------------------------------
if "respostas" not in st.session_state:
    st.session_state["respostas"] = {}
if "dfd_text" not in st.session_state:
    st.session_state["dfd_text"] = ""
if "validation_result" not in st.session_state:
    st.session_state["validation_result"] = None

# -------------------------------
# Carregar banco de perguntas
# -------------------------------
question_bank = _load_question_bank()
dfd_questions = question_bank.get("dfd", {})
total_questions = len(dfd_questions)

st.divider()
st.subheader("üßæ Preencha as respostas para as perguntas abaixo")

answered_count = 0
for key, question_text in dfd_questions.items():
    campo_key = f"resp_{key}"
    resposta = st.text_area(
        question_text,
        value=st.session_state["respostas"].get(campo_key, ""),
        height=80
    )
    if resposta.strip():
        st.session_state["respostas"][campo_key] = resposta
        answered_count += 1

progress = (answered_count / total_questions) if total_questions else 0
st.progress(progress, text=f"Progresso: {answered_count}/{total_questions} respostas")

# -------------------------------
# Gera√ß√£o do DFD
# -------------------------------
st.divider()
st.subheader("üìÑ Gera√ß√£o do Documento DFD")

colA, colB = st.columns([0.45, 0.55], gap="large")

with colA:
    if st.button("Gerar Documento DFD", type="primary"):
        r = st.session_state["respostas"]
        if not r:
            st.warning("‚ö†Ô∏è Nenhuma resposta preenchida.")
        else:
            dfd_text = f"""
# Documento de Formaliza√ß√£o da Demanda (DFD)
**Data:** {datetime.now().strftime('%d/%m/%Y')}  
**Unidade Solicitante:** {r.get('resp_unidade_demandante', 'N√£o informado')}  
**Respons√°vel pela Solicita√ß√£o:** {r.get('resp_responsavel', 'N√£o informado')}

---

## 1Ô∏è‚É£ Descri√ß√£o do Objeto
{r.get('resp_objeto', 'N√£o informado')}

---

## 2Ô∏è‚É£ Justificativa da Necessidade
{r.get('resp_justificativa', 'N√£o informado')}

---

## 3Ô∏è‚É£ Quantidade, Urg√™ncia e Riscos
- **Quantidade ou escopo:** {r.get('resp_quantidade_ou_escopo', 'N√£o informado')}
- **Condi√ß√£o de urg√™ncia:** {r.get('resp_condicao_urgencia', 'N√£o informado')}
- **Riscos se n√£o atendido:** {r.get('resp_riscos', 'N√£o informado')}

---

## 4Ô∏è‚É£ Alinhamento Institucional
{r.get('resp_alinhamento_planejamento', 'N√£o informado')}

---

## 5Ô∏è‚É£ Documentos de Suporte
{r.get('resp_documentos_suporte', 'N√£o informado')}

---

_Gerado automaticamente pelo Synapse Tutor ‚Äî SAAB/TJSP, vers√£o POC 2025_
""".strip()

            st.session_state["dfd_text"] = dfd_text
            st.success("‚úÖ Documento gerado. Veja a pr√©via ao lado.")

with colB:
    st.markdown("### üîé Pr√©via do rascunho (MD)")
    if st.session_state["dfd_text"]:
        st.markdown(st.session_state["dfd_text"])
        st.download_button(
            "‚¨áÔ∏è Baixar rascunho (.md)",
            data=st.session_state["dfd_text"].encode("utf-8"),
            file_name=f"DFD_rascunho_{datetime.now().strftime('%Y%m%d_%H%M')}.md",
            mime="text/markdown"
        )
    else:
        st.info("O rascunho ser√° exibido aqui ap√≥s a gera√ß√£o.")

# -------------------------------
# Valida√ß√£o sem√¢ntica (engine)
# -------------------------------
st.divider()
st.subheader("‚úÖ Valida√ß√£o e Rascunho Orientado")

col1, col2 = st.columns([0.35, 0.65], gap="large")

with col1:
    run_validation = st.button("Executar valida√ß√£o sem√¢ntica")
    if run_validation:
        if not st.session_state["dfd_text"]:
            st.warning("‚ö†Ô∏è Gere o documento DFD antes de validar.")
        else:
            client = _load_api_client()
            if client is None:
                st.stop()
            with st.spinner("Executando valida√ß√£o‚Ä¶"):
                try:
                    result = validate_document(st.session_state["dfd_text"], "DFD", client)
                    st.session_state["validation_result"] = result
                    st.success("Valida√ß√£o conclu√≠da com sucesso!")
                except Exception as e:
                    st.error(f"Falha na valida√ß√£o: {e}")

with col2:
    vr = st.session_state.get("validation_result")
    if vr:
        # M√©tricas principais
        c1, c2 = st.columns(2)
        c1.metric("Score R√≠gido", f"{vr.get('rigid_score', 0):.1f}%")
        c2.metric("Score Sem√¢ntico", f"{vr.get('semantic_score', 0):.1f}%")

        # Itens avaliados (r√≠gidos)
        st.markdown("#### üß© Itens Avaliados (R√≠gidos)")
        rigid_rows = []
        for it in vr.get("rigid_result", []):
            rigid_rows.append({
                "Crit√©rio": it.get("descricao", ""),
                "Obrigat√≥rio": "‚úÖ" if it.get("obrigatorio") else "‚Äî",
                "Presente": "‚úÖ" if it.get("presente") else "‚ùå"
            })
        st.table(rigid_rows)

        # Itens avaliados (sem√¢nticos)
        st.markdown("#### üí° Itens Avaliados (Sem√¢nticos)")
        sem_rows = []
        for it in vr.get("semantic_result", []):
            sem_rows.append({
                "Crit√©rio": it.get("descricao", ""),
                "Presente": "‚úÖ" if it.get("presente") else "‚ùå",
                "Nota": it.get("adequacao_nota", 0),
                "Justificativa": it.get("justificativa", "")
            })
        st.table(sem_rows)

        # Rascunho orientado
        st.markdown("#### üìù Rascunho orientado (markdown)")
        st.markdown(vr.get("guided_markdown", ""))

        # Bot√£o de download em Markdown
        st.download_button(
            "‚¨áÔ∏è Baixar rascunho orientado (.md)",
            data=vr.get("guided_markdown", "").encode("utf-8", errors="ignore"),
            file_name=f"{vr.get('guided_doc_title','Rascunho')}_DFD_{datetime.now().strftime('%Y%m%d_%H%M')}.md",
            mime="text/markdown"
        )

        # =========================================
        # Novo bot√£o: exportar como Word (.docx)
        # =========================================
        try:
            buffer = markdown_to_docx(
                vr.get("guided_markdown", ""),
                title="Documento de Formaliza√ß√£o da Demanda ‚Äì DFD (Rascunho Orientado)",
                meta={
                    "Score R√≠gido": f"{vr.get('rigid_score', 0):.1f}%",
                    "Score Sem√¢ntico": f"{vr.get('semantic_score', 0):.1f}%",
                    "Data": datetime.now().strftime('%d/%m/%Y %H:%M')
                }
            )

            st.download_button(
                "‚¨áÔ∏è Baixar como .docx",
                data=buffer,
                file_name=f"DFD_orientado_{datetime.now().strftime('%Y%m%d_%H%M')}.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            )
        except Exception as e:
            st.error(f"Erro ao gerar o arquivo DOCX: {e}")

    else:
        st.info("Execute a valida√ß√£o para ver scores, tabelas e o rascunho orientado.")

st.divider()
st.caption("Vers√£o POC ‚Ä¢ Tribunal de Justi√ßa de S√£o Paulo ‚Ä¢ SAAB ‚Ä¢ Synapse.IA 2025")
